import Lean
import Lean.Parser.Do
import Lean.Parser.Term

import Mathlib.Algebra.Group.Defs

open Lean Parser

namespace SciLean

--- Syntax for: x += y, x -= y, x *= y
syntax atomic(Term.ident Term.optType) " += " term : doElem
syntax atomic(Term.ident Term.optType) " -= " term : doElem
syntax atomic(Term.ident Term.optType) " *= " term : doElem
syntax atomic(Term.ident Term.optType) " *.= " term : doElem
syntax atomic(Term.ident Term.optType) " /= " term : doElem

--- Rules for: x += y, x -= y, x *= y
macro_rules
| `(doElem| $x:ident $[: $ty]? += $e) => `(doElem| $x:ident $[: $ty]? := $x:ident + $e)
macro_rules
| `(doElem| $x:ident $[: $ty]? -= $e) => `(doElem| $x:ident $[: $ty]? := $x:ident - $e)
macro_rules
| `(doElem| $x:ident $[: $ty]? *= $e) => `(doElem| $x:ident $[: $ty]? := $x:ident * $e)
macro_rules
| `(doElem| $x:ident $[: $ty]? *.= $e) => `(doElem| $x:ident $[: $ty]? := $e * $x:ident)
macro_rules
| `(doElem| $x:ident $[: $ty]? /= $e) => `(doElem| $x:ident $[: $ty]? := $x:ident / $e)



--------------------------------------------------------------------------------

open Elab Term Meta


-- class Partial {Œ± : Sort u} (a : Œ±) {Œ≤ : outParam $ Sort v} (b : outParam Œ≤)

-- elab:max "‚àÇ " x:term:max : term => withFreshMacroScope do

--   let x ‚ÜêelabTerm x none
--   let X ‚Üê (reduce (skipTypes := false) (‚Üê inferType x))
--   let Y ‚Üê mkFreshTypeMVar
--   let y ‚Üê mkFreshExprMVar (some Y)

--   let C := mkAppN (‚Üê mkConst' ``Partial) #[X,x,Y,y]

--   _ ‚Üê synthInstance C
--   instantiateMVars y

  -- old implementation
  -- _ ‚Üê synthInstance (‚Üê elabType (‚Üê `(Partial $x ?m)))
  -- elabTerm (‚Üê `(?m)) none


class PartialDagger {Œ± : Sort u} (a : Œ±) {Œ≤ : outParam $ Sort v} (b : outParam Œ≤)

elab:max "‚àÇ‚Ä† " x:term:max : term => withFreshMacroScope do

  let x ‚ÜêelabTerm x none
  let X ‚Üê (reduce (skipTypes := false) (‚Üê inferType x))
  let Y ‚Üê mkFreshTypeMVar
  let y ‚Üê mkFreshExprMVar (some Y)

  let C := mkAppN (‚Üê mkConst' ``PartialDagger) #[X,x,Y,y]

  _ ‚Üê synthInstance C
  instantiateMVars y

  -- old implementation
  -- _ ‚Üê synthInstance (‚Üê elabType (‚Üê `(PartialDagger $x ?m)))
  -- elabTerm (‚Üê `(?m)) none


class PartialDot {Œ± : Sort u} (a : Œ±) {Œ≤ : outParam $ Sort v} (b : outParam Œ≤)

elab:max "‚àÇ¬∑ " x:term:max : term => withFreshMacroScope do
  _ ‚Üê synthInstance (‚Üê elabType (‚Üê `(PartialDot $x ?m)))
  elabTerm (‚Üê `(?m)) none


class Differential {Œ± : Sort u} (a : Œ±) {Œ≤ : outParam $ Sort v} (b : outParam Œ≤)

elab:max "‚ÖÜ " x:term:max : term => withFreshMacroScope do
  _ ‚Üê synthInstance (‚Üê elabType (‚Üê `(Differential $x ?m)))
  elabTerm (‚Üê `(?m)) none


class Dagger {Œ± : Sort u} (a : Œ±) {Œ≤ : outParam $ Sort v} (b : outParam Œ≤)

open Lean Elab Term Meta in
elab:max (priority:=high) x:term:max "‚Ä†" : term => withFreshMacroScope do
  _ ‚Üê synthInstance (‚Üê elabType (‚Üê `(Dagger $x ?m)))
  elabTerm (‚Üê `(?m)) none


-- class Nabla {Œ± : Sort u} (a : Œ±) {Œ≤ : outParam $ Sort v} (b : outParam Œ≤)

-- elab:max "‚àá " x:term:max : term => withFreshMacroScope do
--   _ ‚Üê synthInstance (‚Üê elabType (‚Üê `(Nabla $x ?m)))
--   elabTerm (‚Üê `(?m)) none


class Divergence {Œ± : Sort u} (a : Œ±) {Œ≤ : outParam $ Sort v} (b : outParam Œ≤)

elab:max "‚àá¬∑ " x:term:max : term => withFreshMacroScope do
  _ ‚Üê synthInstance (‚Üê elabType (‚Üê `(Divergence $x ?m)))
  elabTerm (‚Üê `(?m)) none


class TangentMap {Œ± : Sort u} (a : Œ±) {Œ≤ : outParam $ Sort v} (b : outParam Œ≤)

elab:max "ùíØ " x:term:max : term => withFreshMacroScope do
  _ ‚Üê synthInstance (‚Üê elabType (‚Üê `(TangentMap $x ?m)))
  elabTerm (‚Üê `(?m)) none


class ReverseDifferential {Œ± : Sort u} (a : Œ±) {Œ≤ : outParam $ Sort v} (b : outParam Œ≤)

elab:max "‚Ñõ " x:term:max : term => withFreshMacroScope do
  _ ‚Üê synthInstance (‚Üê elabType (‚Üê `(ReverseDifferential $x ?m)))
  elabTerm (‚Üê `(?m)) none



class OTimes {Œ± : Sort u} {Œ≤ : Sort v} (a : Œ±) (b : Œ≤) {Œ≥ : outParam $ Sort w} (c :  outParam Œ≥) 

elab x:term:71 " ‚äó " y:term:72 : term => withFreshMacroScope do
  _ ‚Üê synthInstance (‚Üê elabType (‚Üê `(OTimes $x $y ?m)))
  elabTerm (‚Üê `(?m)) none



class Integral {Œ± : Sort u} (a : Œ±) {Œ≤ : outParam $ Sort v} (b : outParam Œ≤)

elab:max "‚à´ " x:term:max : term => withFreshMacroScope do

  let x ‚ÜêelabTerm x none
  let X ‚Üê (reduce (skipTypes := false) (‚Üê inferType x))
  let Y ‚Üê mkFreshTypeMVar
  let y ‚Üê mkFreshExprMVar (some Y)

  let C := mkAppN (‚Üê mkConst' ``Integral) #[X,x,Y,y]

  _ ‚Üê synthInstance C
  instantiateMVars y

  -- old implementation
  -- _ ‚Üê synthInstance (‚Üê elabType (‚Üê `(Integral $x ?m)))
  -- elabTerm (‚Üê `(?m)) none



class InverseNotation {Œ± : Sort u} (a : Œ±) {Œ≤ : outParam $ Sort v} (b : outParam Œ≤)

open Lean Elab Term Meta in
elab:max (priority:=high) x:term:max "‚Åª¬π" : term => withFreshMacroScope do
  _ ‚Üê synthInstance (‚Üê elabType (‚Üê `(InverseNotation $x ?m)))
  elabTerm (‚Üê `(?m)) none

-- recover old notation
instance inv.instInverseNotation {Œ±} [Inv Œ±] (a : Œ±) : InverseNotation a (Inv.inv a) := ‚ü®‚ü©
