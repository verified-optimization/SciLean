import Mathlib.Algebra.Module.Basic
import Mathlib.Data.IsROrC.Lemmas
import Mathlib.Topology.Algebra.Module.LocallyConvex

import SciLean.Util.SorryProof

namespace SciLean


-- TODO: move this section
namespace Curve

variable {K : Type u} [NontriviallyNormedField K] 
variable {F : Type v} [AddCommGroup F] [Module K F] [TopologicalSpace F] -- [TopologicalAddGroup F] [ContinuousSMul K F]
variable {E : Type w} [AddCommGroup E] [Module K E] [TopologicalSpace E] -- [TopologicalAddGroup E] [ContinuousSMul K E]

open scoped Classical Topology BigOperators Filter ENNReal

open Filter Asymptotics Set

def HasDerivAtFilter (f : K ‚Üí F) (f' : F) (x : K) (L : Filter K) :=
  Tendsto (fun x' => (x' - x)‚Åª¬π ‚Ä¢ (f x' - f x)) L (nhds f')

def HasDerivAt (f : K ‚Üí F) (f' : F) (x : K) :=
  HasDerivAtFilter f f' x (ùìù x)

def DifferentiableAt (f : K ‚Üí F) (x : K) :=
  ‚àÉ f' : F, HasDerivAt f f' x

noncomputable
def deriv (f : K ‚Üí F) (x : K) :=
  if h : ‚àÉ f', HasDerivAt f f' x then Classical.choose h else 0

def Differentiable (f : K ‚Üí F) :=
  ‚àÄ x, DifferentiableAt f x

-- TODO: This should probably be true on small neighborhood of x not just *at* x
def DifferentiableAtN (f : K ‚Üí F) (x : K) (n : Nat) :=
  match n with
  | 0 => ContinuousAt f x
  | n+1 => DifferentiableAt f x ‚àß DifferentiableAtN (deriv f) x n

def DifferentiableN (f : K ‚Üí F) (n : Nat) := ‚àÄ x, DifferentiableAtN f x n
def SmoothAt        (f : K ‚Üí F) (x : K)   := ‚àÄ n, DifferentiableAtN f x n
def Smooth          (f : K ‚Üí F)           := ‚àÄ x n, DifferentiableAtN f x n

end Curve


-- __   __      _             ___
-- \ \ / /__ __| |_ ___ _ _  / __|_ __  __ _ __ ___
--  \ V / -_) _|  _/ _ \ '_| \__ \ '_ \/ _` / _/ -_)
--   \_/\___\__|\__\___/_|   |___/ .__/\__,_\__\___|
--                               |_|
-- At the and we will use Convenient Vector Space. It is a special kind of topological vector space
/-- Vectors space `X` over field `K`

More precisely this is Convenient Vector Space which is a special class of vector spaces
which allow very general definition of differentiability. In particular, the space `C‚àû(‚Ñù,‚Ñù)`, 
smooth functions on real numbers, is Convenient Vector Spaces but fails to be Banach space.
-/
class Vec (K : Type _) [IsROrC K] (X : Type _) 
  extends 
    AddCommGroup X,
    TopologicalSpace X,
    TopologicalAddGroup X,
    Module K X,
    ContinuousSMul K X
  where
    -- locally convex in some sense, mathlib definition is odd
    -- mild completeness condition
    scalar_wise_smooth : ‚àÄ (c : K ‚Üí X),
      Curve.Smooth c
      ‚Üî 
      ‚àÄ x' : X ‚ÜíL[K] K, Curve.Smooth (x'‚àòc)

section CommonVectorSpaces

  variable {Œ± Œ≤ Œπ : Type u}
  variable {K : Type _} [IsROrC K]
  variable {U V} [Vec K U] [Vec K V]
  variable {E : Œπ ‚Üí Type v}

  instance {X} [Vec K X] : Inhabited X := ‚ü®0‚ü©

  -- instance : MulAction ‚Ñù ‚Ñù := MulAction.mk sorry_proof sorry_proof
  -- instance : DistribMulAction ‚Ñù ‚Ñù := DistribMulAction.mk sorry_proof sorry_proof
  -- instance : Module ‚Ñù ‚Ñù := Module.mk sorry_proof sorry_proof
  -- instance : Vec ‚Ñù := Vec.mk


  abbrev AddSemigroup.mkSorryProofs {Œ±} [Add Œ±] : AddSemigroup Œ± := AddSemigroup.mk sorry_proof
  abbrev AddMonoid.mkSorryProofs {Œ±} [Add Œ±] [Zero Œ±] : AddMonoid Œ± := 
    AddMonoid.mk (toAddSemigroup := AddSemigroup.mkSorryProofs) sorry_proof sorry_proof nsmulRec sorry_proof sorry_proof
  abbrev SubNegMonoid.mkSorryProofs {Œ±} [Add Œ±] [Sub Œ±] [Neg Œ±] [Zero Œ±]  : SubNegMonoid Œ± := 
    SubNegMonoid.mk (toAddMonoid := AddMonoid.mkSorryProofs) sorry_proof zsmulRec sorry_proof sorry_proof sorry_proof
  abbrev AddGroup.mkSorryProofs {Œ±} [Add Œ±] [Sub Œ±] [Neg Œ±] [Zero Œ±] : AddGroup Œ± :=
    AddGroup.mk (toSubNegMonoid := SubNegMonoid.mkSorryProofs) sorry_proof
  abbrev AddCommGroup.mkSorryProofs {Œ±} [Add Œ±] [Sub Œ±] [Neg Œ±] [Zero Œ±] : AddCommGroup Œ± :=
    AddCommGroup.mk (toAddGroup := AddGroup.mkSorryProofs) sorry_proof

  abbrev MulAction.mkSorryProofs {Œ± Œ≤} [Monoid Œ±] [SMul Œ± Œ≤] : MulAction Œ± Œ≤ := MulAction.mk sorry_proof sorry_proof
  abbrev DistribMulAction.mkSorryProofs {Œ± Œ≤} [Monoid Œ±] [AddMonoid Œ≤] [SMul Œ± Œ≤] : DistribMulAction Œ± Œ≤ := 
    DistribMulAction.mk (toMulAction := MulAction.mkSorryProofs) sorry_proof sorry_proof
  abbrev Module.mkSorryProofs {Œ± Œ≤} [Semiring Œ±] [addcommgroup : AddCommGroup Œ≤] [SMul Œ± Œ≤] : Module Œ± Œ≤ := 
    Module.mk (toDistribMulAction := DistribMulAction.mkSorryProofs) sorry_proof sorry_proof

  abbrev ContinuousAdd.mkSorryProofs {Œ±} [Add Œ±] [TopologicalSpace Œ±] : ContinuousAdd Œ± := ContinuousAdd.mk sorry_proof
  abbrev ContinuousNeg.mkSorryProofs {Œ±} [Neg Œ±] [TopologicalSpace Œ±] : ContinuousNeg Œ± := ContinuousNeg.mk sorry_proof
  abbrev TopologicalAddGroup.mkSorryProofs {Œ±} [Add Œ±] [Sub Œ±] [Neg Œ±] [Zero Œ±] [TopologicalSpace Œ±] := 
   @TopologicalAddGroup.mk Œ± _ (AddGroup.mkSorryProofs) (ContinuousAdd.mkSorryProofs) (ContinuousNeg.mkSorryProofs)

  abbrev ContinuousSMul.mkSorryProofs {Œ±} [SMul K Œ±] [TopologicalSpace Œ±] : ContinuousSMul K Œ± := ContinuousSMul.mk sorry_proof

  abbrev Vec.mkSorryProofs {Œ±} [Add Œ±] [Sub Œ±] [Neg Œ±] [Zero Œ±] [SMul K Œ±] [TopologicalSpace Œ±] : Vec K Œ± :=
    Vec.mk (toAddCommGroup := AddCommGroup.mkSorryProofs) (toModule := Module.mkSorryProofs (addcommgroup := AddCommGroup.mkSorryProofs)) (toTopologicalAddGroup := TopologicalAddGroup.mkSorryProofs) (toContinuousSMul := ContinuousSMul.mkSorryProofs) sorry_proof

  instance [IsROrC K] : Vec K K where
    scalar_wise_smooth := sorry_proof
    
  -- instance [inst : Vec K U] : Vec K (Œ± ‚Üí U) := 
  --   -- option 1:
  --   -- Vec.mkSorryProofs
  --   -- option 2:
  --   -- have : Module K U := inst.toModule
  --   -- Vec.mk
  --   -- option 3:
  --   by cases inst; apply Vec.mk (scalar_wise_smooth := sorry_proof)


  instance(priority:=low) (Œ± : Type _) (X : Œ± ‚Üí Type _) [inst : ‚àÄ a, Vec K (X a)] : Vec K ((a : Œ±) ‚Üí X a) := 
    --Vec.mkSorryProofs
    let _ : ‚àÄ a, Module K (X a) := fun a => (inst a).toModule
    let _ : ‚àÄ a, TopologicalSpace (X a) := fun a => (inst a).toTopologicalSpace
    let _ : ‚àÄ a, TopologicalAddGroup (X a) := fun a => (inst a).toTopologicalAddGroup
    let _ : ‚àÄ a, ContinuousSMul K (X a) := fun a => (inst a).toContinuousSMul
    Vec.mk (scalar_wise_smooth := sorry_proof)

  instance [instU : Vec K U] [instV : Vec K V] : Vec K (U √ó V) := 
    by cases instU; cases instV; apply Vec.mk (scalar_wise_smooth := sorry_proof)

  instance : Vec K Unit := Vec.mk (scalar_wise_smooth := sorry_proof)


  infix:30 "‚äï" => Sum.elim  -- X‚äïY‚ÜíType

  instance instVecSum
    (X Y : Type) (TX : X ‚Üí Type) (TY : Y ‚Üí Type)  (xy : X‚äïY) 
    [‚àÄ x, Vec K (TX x)] [‚àÄ y, Vec K (TY y)]
    : Vec K ((TX‚äïTY) xy) 
    :=
    match xy with
    | .inl _ => by dsimp; infer_instance
    | .inr _ => by dsimp; infer_instance


end CommonVectorSpaces



section VecProp

class VecProp (K : Type _) [IsROrC K] {X : Type _} [Vec K X] (P : X ‚Üí Prop) : Prop where
  add : ‚àÄ x y, P x ‚Üí P y ‚Üí P (x + y)
  neg : ‚àÄ x, P x ‚Üí P (- x)
  smul : ‚àÄ (r : K) x, P x ‚Üí P (r ‚Ä¢ x)
  zero : P 0


variable {K : Type _} [IsROrC K] {X : Type _} [Vec K X] {P : X ‚Üí Prop} [inst : VecProp K P]

instance : Add {x : X // P x} := ‚ü®Œª x y => ‚ü®x.1 + y.1, inst.add x.1 y.1 x.2 y.2‚ü©‚ü©
instance : Sub {x : X // P x} := ‚ü®Œª x y => ‚ü®x.1 - y.1, by simp[sub_eq_add_neg]; apply inst.add; apply x.2; apply inst.neg; apply y.2‚ü©‚ü©
instance : Neg {x : X // P x} := ‚ü®Œª x => ‚ü®- x.1, inst.neg x.1 x.2‚ü©‚ü©
instance : SMul K {x : X // P x} := ‚ü®Œª r x => ‚ü®r ‚Ä¢ x.1, inst.smul r x.1 x.2‚ü©‚ü©

instance : Zero {x : X // P x} := ‚ü®‚ü®0, inst.zero‚ü©‚ü©

-- instance : Vec K {x : X // P x} := sorry_proof

end VecProp
